@page "/create"
@page "/edit/{TaskId:int}"
@page "/view/{TaskId:int}"
@using MudBlazor
@using TaskManagementSystem.UI.Models
@using TaskManagementSystem.UI.Services
@inject ITaskService TaskService
@inject NavigationManager Navigation

<MudPaper Class="pa-6 mx-auto mt-6" Elevation="1" MaxWidth="800px">
    <MudText Typo="Typo.h5" Class="mb-4">
        @(IsViewMode ? "View Task" : TaskId.HasValue ? "Edit Task" : "Create Task")
    </MudText>

    @if (_model != null)
    {
        <MudForm @ref="_form" Model="_model" Validated="OnValidSubmit">
            <MudGrid GutterSize="3">
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" Label="Title" @bind-Value="_model.Title" Required="true" ReadOnly="IsViewMode" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" Label="Description" @bind-Value="_model.Description" Required="true" ReadOnly="IsViewMode" />
                </MudItem>
                @* <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Due Date" @bind-Date="_model.DueDate" Disabled="IsViewMode" />
                </MudItem> *@
                @* <MudItem xs="12" sm="6">
                    <MudSelect T="string" Label="Priority" @bind-Value="_model.Priority" ReadOnly="IsViewMode">
                        @foreach (var option in PriorityOptions)
                        {
                            <MudSelectItem Value="@option">@option</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem> *@
                @if (IsViewMode)
                {
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.subtitle2" Class="mb-1">Priority</MudText>
                        <MudChip T="string" Color="@GetPriorityColor(_model.Priority)">
                            @_model.Priority
                        </MudChip>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.subtitle2" Class="mb-1">Status</MudText>
                        <MudChip T="string" Color="@GetStatusColor(_model.IsCompleted ? "Completed" : "In Progress")">
                            @(_model.IsCompleted ? "Completed" : "In Progress")
                        </MudChip>
                    </MudItem>
                }

                else
                {
                    <MudItem xs="12" sm="6">
                        <MudSelect T="string" Label="Priority" @bind-Value="_model.Priority" ReadOnly="IsViewMode">
                            @foreach (var option in PriorityOptions)
                            {
                                <MudSelectItem Value="@option">@option</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudCheckBox T="bool" Label="Is Completed" @bind-Checked="_model.IsCompleted"/>
                    </MudItem>
                }
                
                
                @* <MudItem xs="12" sm="6">
                    <MudTextField T="int" Label="User ID" @bind-Value="_model.UserId" Required="true" ReadOnly="IsViewMode" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="int?" Label="Project ID" @bind-Value="_model.ProjectId" ReadOnly="IsViewMode" />
                </MudItem> *@
            </MudGrid>

            @if (!IsViewMode)
            {
                <MudButton Type="Submit" Color="Color.Primary" Class="mt-4">Save</MudButton>
            }
        </MudForm>
    }

    @if (!IsViewMode)
    {
        <MudAlert Severity="Severity.Success" Dense="true" Class="mt-4" Visible="_showSuccess">
            Task saved successfully!
        </MudAlert>
    }
</MudPaper>

@code {
    [Parameter] public int? TaskId { get; set; }

    private AddTaskRequestDto _model = new();
    private MudForm _form;
    private bool _showSuccess = false;

    private bool IsViewMode => Navigation.Uri.Contains("/view");

    private List<string> PriorityOptions = new() { "Low", "Medium", "High" };

    protected override async Task OnInitializedAsync()
    {
        if (TaskId.HasValue)
        {
            var task = await TaskService.GetTaskByIdAsync(TaskId.Value);
            if (task != null)
            {
                _model = task;
            }
        }
        else
        {
            _model = new AddTaskRequestDto();
        }
    }

    private async Task OnValidSubmit()
    {
        if (IsViewMode)
            return;

        if (TaskId.HasValue)
        {
            await TaskService.UpdateTaskAsync(TaskId.Value, new UpdateTaskRequestDto
            {
                Title = _model.Title,
                Description = _model.Description,
                DueDate = _model.DueDate,
                IsCompleted = _model.IsCompleted,
                Priority = _model.Priority,
                UserId = _model.UserId,
                ProjectId = _model.ProjectId
            });
        }
        else
        {
            await TaskService.AddTaskAsync(_model);
        }

        _showSuccess = true;
        StateHasChanged(); // force UI to update immediately
        await Task.Delay(2000); // wait 2 seconds
        _showSuccess = false;
        StateHasChanged(); // refresh UI to hide the alert
    }

    private Color GetStatusColor(string status) => status switch
    {
        "Created" => Color.Info,
        "InProgress" => Color.Warning,
        "Completed" => Color.Success,
        _ => Color.Default
    };

    private Color GetPriorityColor(string priority) => priority switch
    {
        "Low" => Color.Success,
        "Medium" => Color.Warning,
        "High" => Color.Error,
        _ => Color.Default
    };

}
